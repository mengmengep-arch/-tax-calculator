// ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ó‡∏¢ (‡∏õ‡∏µ 2568)
// ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ö‡∏±‡∏ô‡πÑ‡∏î: [‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô, ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î, ‡∏≠‡∏±‡∏ï‡∏£‡∏≤%]
const TAX_BRACKETS = [
    { min: 0, max: 150000, rate: 0 },
    { min: 150000, max: 300000, rate: 5 },
    { min: 300000, max: 500000, rate: 10 },
    { min: 500000, max: 750000, rate: 15 },
    { min: 750000, max: 1000000, rate: 20 },
    { min: 1000000, max: 2000000, rate: 25 },
    { min: 2000000, max: 5000000, rate: 30 },
    { min: 5000000, max: Infinity, rate: 35 }
];

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global
let currentStep = 1;
let incomeData = {};
let basicDeductions = {};
let plan1Data = {};
let plan2Data = {};
let chartInstance = null;

// =============== Helper Functions ===============

function formatNumber(num) {
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô number ‡∏Å‡πà‡∏≠‡∏ô
    const n = parseFloat(num);
    if (isNaN(n)) return '0';
    return Math.round(n).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function parseNumberWithComma(value) {
    if (typeof value === 'string') {
        return parseFloat(value.replace(/,/g, '')) || 0;
    }
    return parseFloat(value) || 0;
}

function calculateTax(netIncome, totalDeduction) {
    const taxableIncome = Math.max(netIncome - totalDeduction, 0);
    let totalTax = 0;

    for (let bracket of TAX_BRACKETS) {
        if (taxableIncome <= bracket.min) break;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ
        const incomeInBracket = Math.min(taxableIncome, bracket.max) - bracket.min;

        if (incomeInBracket > 0) {
            const taxAtThisRate = incomeInBracket * (bracket.rate / 100);
            totalTax += taxAtThisRate;
        }
    }

    return Math.round(totalTax);
}

// =============== Auto Save/Load for Step 3 ===============

function savePlanData() {
    try {
        const planData = {
            plan1: {},
            plan2: {}
        };

        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö setupPlanItems)
        const deductionItems = [
            'lifeInsurance', 'healthInsurance', 'pensionInsurance',
            'pvd', 'rmf', 'thaiEsg', 'thaiEsgx',
            'homeLoan', 'donationDouble', 'donationPolitical', 'easyEreceipt'
        ];

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á Plan 1 ‡πÅ‡∏•‡∏∞ Plan 2
        ['plan1', 'plan2'].forEach(plan => {
            deductionItems.forEach(item => {
                const checkbox = document.getElementById(`${plan}_${item}_check`);
                const slider = document.getElementById(`${plan}_${item}`);

                if (checkbox && slider) {
                    planData[plan][item] = {
                        checked: checkbox.checked,
                        value: parseFloat(slider.value) || 0
                    };
                }
            });
        });

        localStorage.setItem('taxCalc_planData', JSON.stringify(planData));
        console.log('üíæ Saved plan data:', planData);
    } catch (e) {
        console.error('‚ùå Error saving plan data:', e);
    }
}

function loadPlanData() {
    try {
        const saved = localStorage.getItem('taxCalc_planData');
        if (!saved) {
            console.log('üìÇ No saved plan data found');
            return;
        }

        const planData = JSON.parse(saved);
        console.log('üìÇ Loading plan data:', planData);

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á Plan 1 ‡πÅ‡∏•‡∏∞ Plan 2
        ['plan1', 'plan2'].forEach(plan => {
            if (!planData[plan]) return;

            Object.keys(planData[plan]).forEach(item => {
                const data = planData[plan][item];
                const checkbox = document.getElementById(`${plan}_${item}_check`);
                const slider = document.getElementById(`${plan}_${item}`);
                const container = document.getElementById(`${plan}_${item}_container`);

                if (checkbox && slider && data) {
                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ checkbox
                    checkbox.checked = data.checked;

                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ slider
                    slider.value = data.value;

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï display
                    const displaySpan = document.getElementById(`${plan}_${item}_display`);
                    if (displaySpan) {
                        displaySpan.textContent = formatNumber(data.value);
                    }

                    // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô slider container ‡∏ï‡∏≤‡∏° checkbox
                    if (container) {
                        container.style.display = data.checked ? 'block' : 'none';
                    }
                }
            });
        });

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï slider limits ‡πÅ‡∏•‡∏∞ calculations
        updateSliderLimits('plan1');
        updateSliderLimits('plan2');
        updateAllScenarios();

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö UI
        // (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ checkbox.checked ‡πÅ‡∏•‡∏∞ slider.value ‡πÑ‡∏°‡πà trigger event listeners)
        savePlanData();

        console.log('‚úÖ Plan data loaded successfully');
    } catch (e) {
        console.error('‚ùå Error loading plan data:', e);
    }
}

// =============== Step Navigation ===============

function nextStep(step) {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á step ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (currentStep === 1) {
        saveIncomeData();
    } else if (currentStep === 2) {
        saveBasicDeductions();
    } else if (currentStep === 3) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        calculateFinalResults();
    }

    // ‡∏ã‡πà‡∏≠‡∏ô step ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    document.getElementById(`step${currentStep}`).classList.remove('active');
    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.remove('active');

    // ‡πÅ‡∏™‡∏î‡∏á step ‡πÉ‡∏´‡∏°‡πà
    currentStep = step;
    document.getElementById(`step${currentStep}`).classList.add('active');
    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.add('active');

    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏ô‡πâ‡∏≤ Simulation
    if (currentStep === 3) {
        updateAllScenarios();
    }
}

function prevStep(step) {
    document.getElementById(`step${currentStep}`).classList.remove('active');
    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.remove('active');

    currentStep = step;
    document.getElementById(`step${currentStep}`).classList.add('active');
    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.add('active');

    window.scrollTo({ top: 0, behavior: 'smooth' });
}

function jumpToStep(step) {
    console.log(`üéØ Jumping to step ${step}`);

    // Save current step data
    if (currentStep === 1) {
        saveIncomeData();
    } else if (currentStep === 2) {
        saveBasicDeductions();
    }

    // Remove active class from current step
    document.getElementById(`step${currentStep}`).classList.remove('active');
    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.remove('active');

    // Set new step
    currentStep = step;

    // Add active class to new step
    document.getElementById(`step${currentStep}`).classList.add('active');
    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.add('active');

    // If jumping to step 3, update scenarios
    if (currentStep === 3) {
        updateAllScenarios();
    }

    // If jumping to step 4, calculate final results
    if (currentStep === 4) {
        calculateFinalResults();
    }

    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

function startOver() {
    currentStep = 1;
    document.querySelectorAll('.wizard-step').forEach(step => step.classList.remove('active'));
    document.querySelectorAll('.progress-step').forEach(step => step.classList.remove('active'));
    document.getElementById('step1').classList.add('active');
    document.querySelector('.progress-step[data-step="1"]').classList.add('active');
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

function resetAllData() {
    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
    if (confirm('‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö!')) {
        console.log('üóëÔ∏è Clearing all data...');

        // ‡∏•‡πâ‡∏≤‡∏á localStorage
        localStorage.clear();

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        alert('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤...');

        // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        location.reload();
    }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏¥‡∏õ
function checkAndLoadSalarySlipsData() {
    const taxData = localStorage.getItem('taxCalculationData');
    if (!taxData) return;

    try {
        const data = JSON.parse(taxData);
        if (!data.fromSalarySlips) return;

        console.log('üìÑ Found data from salary slips:', data);

        // Choose color and title based on data type
        const isEstimated = data.isEstimated || false;
        const bgColor = isEstimated ?
            'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' :
            'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)';
        const title = isEstimated ?
            `üìä ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! (‡∏à‡∏≤‡∏Å ${data.monthsUsed} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)` :
            '‚úÖ ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß!';

        // Show notification
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background: ${bgColor};
            color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            z-index: 10000;
            max-width: 350px;
            animation: slideIn 0.5s ease;
        `;
        notification.innerHTML = `
            <strong style="display: block; margin-bottom: 10px;">${title}</strong>
            <p style="margin: 5px 0; font-size: 0.9rem;">üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${formatNumber(data.salary)} ‡∏ö‡∏≤‡∏ó${isEstimated ? '/‡∏õ‡∏µ' : ''}</p>
            <p style="margin: 5px 0; font-size: 0.9rem;">üéÅ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™: ${formatNumber(data.bonus)} ‡∏ö‡∏≤‡∏ó${isEstimated ? '/‡∏õ‡∏µ' : ''}</p>
            <p style="margin: 5px 0; font-size: 0.9rem;">üè• ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°: ${formatNumber(data.socialSecurity)} ‡∏ö‡∏≤‡∏ó${isEstimated ? '/‡∏õ‡∏µ' : ''}</p>
            ${isEstimated ? '<p style="margin-top: 10px; font-size: 0.85rem; opacity: 0.9;">‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£</p>' : ''}
            <button onclick="this.parentElement.remove()" style="
                margin-top: 10px;
                background: white;
                color: ${isEstimated ? '#667eea' : '#4CAF50'};
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                cursor: pointer;
                font-weight: bold;
                width: 100%;
            ">‡∏ï‡∏Å‡∏•‡∏á</button>
        `;

        // Add animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(400px); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);

        document.body.appendChild(notification);

        // Auto remove after 10 seconds
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 10000);

        // Auto-fill the data
        const salarySlider = document.getElementById('salarySlider');
        const bonusSlider = document.getElementById('bonusSlider');
        const socialSecuritySlider = document.getElementById('socialSecuritySlider');

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 12)
        const monthlySalary = Math.round((data.salary || 0) / 12);

        if (salarySlider) {
            salarySlider.value = monthlySalary;
            document.getElementById('salary').value = formatNumber(monthlySalary);
            document.getElementById('salaryDisplay').textContent = formatNumber(monthlySalary);
        }

        if (bonusSlider) {
            bonusSlider.value = data.bonus || 0;
            document.getElementById('bonus').value = formatNumber(data.bonus || 0);
            document.getElementById('bonusDisplay').textContent = formatNumber(data.bonus || 0);
        }

        if (socialSecuritySlider) {
            // ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏Å‡πá‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 12 ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
            const monthlySS = Math.round((data.socialSecurity || 0) / 12);
            socialSecuritySlider.value = monthlySS;
            document.getElementById('socialSecurity').value = formatNumber(monthlySS);
            document.getElementById('socialSecurityDisplay').textContent = formatNumber(monthlySS);
        }

        // Remove the flag so it doesn't auto-fill again
        localStorage.removeItem('taxCalculationData');

        console.log('‚úÖ Auto-filled data from salary slips');

    } catch (e) {
        console.error('‚ùå Error loading salary slips data:', e);
    }
}

// =============== Step 1: Income Data ===============

function saveIncomeData() {
    const salary = parseNumberWithComma(document.getElementById('salary').value);
    const bonus = parseNumberWithComma(document.getElementById('bonus').value);
    const totalIncome = (salary * 12) + bonus;
    const expenses = Math.min(totalIncome * 0.5, 100000);
    const netIncome = totalIncome - expenses;

    incomeData = {
        salary,
        bonus,
        totalIncome,
        expenses,
        netIncome
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
    localStorage.setItem('taxCalc_incomeData', JSON.stringify(incomeData));
}

function updateIncomePreview() {
    const salary = parseNumberWithComma(document.getElementById('salary').value || 0);
    const bonus = parseNumberWithComma(document.getElementById('bonus').value || 0);
    const totalIncome = (salary * 12) + bonus;
    const expenses = Math.min(totalIncome * 0.5, 100000);
    const netIncome = totalIncome - expenses;

    document.getElementById('totalIncomePreview').textContent = formatNumber(totalIncome);
    document.getElementById('expensesPreview').textContent = formatNumber(expenses);
    document.getElementById('netIncomePreview').textContent = formatNumber(netIncome);
}

// =============== Step 2: Basic Deductions ===============

function saveBasicDeductions() {
    let total = 60000; // ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß

    if (document.getElementById('spouseDeduction').checked) {
        total += 60000;
    }

    const childCount = parseInt(document.getElementById('childCount').value) || 0;
    total += childCount * 30000;

    if (document.getElementById('parentDeduction').checked) {
        const parentCount = parseInt(document.getElementById('parentCount').value);
        total += parentCount * 30000;
    }

    if (document.getElementById('parentSpouseDeduction').checked) {
        const parentSpouseCount = parseInt(document.getElementById('parentSpouseCount').value);
        total += parentSpouseCount * 30000;
    }

    const socialSecurity = Math.min(parseNumberWithComma(document.getElementById('socialSecurity').value) * 12, 10000);
    total += socialSecurity;

    basicDeductions = { total };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
    const formData = {
        spouseDeduction: document.getElementById('spouseDeduction').checked,
        childCount,
        parentDeduction: document.getElementById('parentDeduction').checked,
        parentCount: document.getElementById('parentCount').value,
        parentSpouseDeduction: document.getElementById('parentSpouseDeduction').checked,
        parentSpouseCount: document.getElementById('parentSpouseCount').value,
        socialSecurity: document.getElementById('socialSecurity').value
    };
    localStorage.setItem('taxCalc_basicDeductions', JSON.stringify(formData));
}

function updateBasicDeductionPreview() {
    let total = 60000;

    if (document.getElementById('spouseDeduction').checked) {
        total += 60000;
    }

    const childCount = parseInt(document.getElementById('childCount').value) || 0;
    total += childCount * 30000;

    if (document.getElementById('parentDeduction').checked) {
        const parentCount = parseInt(document.getElementById('parentCount').value);
        total += parentCount * 30000;
    }

    if (document.getElementById('parentSpouseDeduction').checked) {
        const parentSpouseCount = parseInt(document.getElementById('parentSpouseCount').value);
        total += parentSpouseCount * 30000;
    }

    const socialSecurity = Math.min(parseNumberWithComma(document.getElementById('socialSecurity').value || 0) * 12, 10000);
    total += socialSecurity;

    document.getElementById('basicDeductionPreview').textContent = formatNumber(total);
}

function updateAndSaveBasicDeductions() {
    updateBasicDeductionPreview();
    saveBasicDeductions();
}

// =============== Step 3: Simulation ===============

function switchScenario(scenario) {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï tabs
    document.querySelectorAll('.scenario-tab').forEach(tab => tab.classList.remove('active'));
    event.target.classList.add('active');

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï panels
    document.querySelectorAll('.scenario-panel').forEach(panel => panel.classList.remove('active'));
    document.getElementById(`${scenario}-panel`).classList.add('active');
}

function updateAllScenarios() {
    updateBaselineScenario();
    updatePlan1();
    updatePlan2();

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï max ‡∏Ç‡∏≠‡∏á slider ‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    updateSliderLimits('plan1');
    updateSliderLimits('plan2');

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏£‡∏ß‡∏°
    updateLimitDisplay('plan1');
    updateLimitDisplay('plan2');
}

function updateBaselineScenario() {
    const netIncome = incomeData.netIncome || 0;
    const deductions = basicDeductions.total || 0;
    const tax = calculateTax(netIncome, deductions);

    document.getElementById('baselineTaxPreview').textContent = formatNumber(tax) + ' ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ';
    document.getElementById('baselineTaxMonthlyPreview').textContent = formatNumber(Math.round(tax / 12)) + ' ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
}

function getPlan1Deductions() {
    const netIncome = incomeData.netIncome || 0;
    let total = 0;

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å Plan 1
    const items = ['lifeInsurance', 'healthInsurance', 'pensionInsurance', 'pvd', 'rmf', 'thaiEsg', 'thaiEsgx', 'homeLoan', 'donationDouble', 'donationPolitical', 'easyEreceipt'];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100K) ‡∏Å‡πà‡∏≠‡∏ô
    let insuranceTotal = 0;
    const insuranceItems = ['lifeInsurance', 'healthInsurance'];

    insuranceItems.forEach(item => {
        const checkbox = document.getElementById(`plan1_${item}_check`);
        const slider = document.getElementById(`plan1_${item}`);

        if (checkbox && slider && checkbox.checked) {
            let value = parseFloat(slider.value) || 0;
            insuranceTotal += value;
        }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100,000
    if (insuranceTotal > 100000) {
        insuranceTotal = 100000;
    }
    total += insuranceTotal;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì retirement funds (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500K)
    let retirementTotal = 0;
    const retirementItems = ['pensionInsurance', 'pvd', 'rmf'];

    retirementItems.forEach(item => {
        const checkbox = document.getElementById(`plan1_${item}_check`);
        const slider = document.getElementById(`plan1_${item}`);

        if (checkbox && slider && checkbox.checked) {
            let value = parseFloat(slider.value) || 0;

            // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            if (item === 'pensionInsurance') value = Math.min(value, netIncome * 0.15, 200000);
            else if (item === 'pvd') value = Math.min(value, 500000);
            else if (item === 'rmf') value = Math.min(value, netIncome * 0.30, 500000);

            retirementTotal += value;
        }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500,000
    if (retirementTotal > 500000) {
        retirementTotal = 500000;
    }
    total += retirementTotal;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    items.forEach(item => {
        if (insuranceItems.includes(item) || retirementItems.includes(item)) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß

        const checkbox = document.getElementById(`plan1_${item}_check`);
        const slider = document.getElementById(`plan1_${item}`);

        if (checkbox && slider && checkbox.checked) {
            let value = parseFloat(slider.value) || 0;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
            if (item === 'thaiEsg') value = Math.min(value, netIncome * 0.30, 300000);
            else if (item === 'thaiEsgx') value = Math.min(value, netIncome * 0.30, 300000);
            else if (item === 'homeLoan') value = Math.min(value, 100000);
            else if (item === 'donationDouble') value = Math.min(value * 2, netIncome * 0.10); // 2 ‡πÄ‡∏ó‡πà‡∏≤!
            else if (item === 'donationPolitical') value = Math.min(value, 10000);
            else if (item === 'easyEreceipt') value = Math.min(value, 50000);

            total += value;
        }
    });

    return total;
}

function getPlan2Deductions() {
    const netIncome = incomeData.netIncome || 0;
    let total = 0;

    const items = ['lifeInsurance', 'healthInsurance', 'pensionInsurance', 'pvd', 'rmf', 'thaiEsg', 'thaiEsgx', 'homeLoan', 'donationDouble', 'donationPolitical', 'easyEreceipt'];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100K) ‡∏Å‡πà‡∏≠‡∏ô
    let insuranceTotal = 0;
    const insuranceItems = ['lifeInsurance', 'healthInsurance'];

    insuranceItems.forEach(item => {
        const checkbox = document.getElementById(`plan2_${item}_check`);
        const slider = document.getElementById(`plan2_${item}`);

        if (checkbox && slider && checkbox.checked) {
            let value = parseFloat(slider.value) || 0;
            insuranceTotal += value;
        }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100,000
    if (insuranceTotal > 100000) {
        insuranceTotal = 100000;
    }
    total += insuranceTotal;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì retirement funds (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500K)
    let retirementTotal = 0;
    const retirementItems = ['pensionInsurance', 'pvd', 'rmf'];

    retirementItems.forEach(item => {
        const checkbox = document.getElementById(`plan2_${item}_check`);
        const slider = document.getElementById(`plan2_${item}`);

        if (checkbox && slider && checkbox.checked) {
            let value = parseFloat(slider.value) || 0;

            // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            if (item === 'pensionInsurance') value = Math.min(value, netIncome * 0.15, 200000);
            else if (item === 'pvd') value = Math.min(value, 500000);
            else if (item === 'rmf') value = Math.min(value, netIncome * 0.30, 500000);

            retirementTotal += value;
        }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500,000
    if (retirementTotal > 500000) {
        retirementTotal = 500000;
    }
    total += retirementTotal;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    items.forEach(item => {
        if (insuranceItems.includes(item) || retirementItems.includes(item)) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß

        const checkbox = document.getElementById(`plan2_${item}_check`);
        const slider = document.getElementById(`plan2_${item}`);

        if (checkbox && slider && checkbox.checked) {
            let value = parseFloat(slider.value) || 0;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
            if (item === 'thaiEsg') value = Math.min(value, netIncome * 0.30, 300000);
            else if (item === 'thaiEsgx') value = Math.min(value, netIncome * 0.30, 300000);
            else if (item === 'homeLoan') value = Math.min(value, 100000);
            else if (item === 'donationDouble') value = Math.min(value * 2, netIncome * 0.10); // 2 ‡πÄ‡∏ó‡πà‡∏≤!
            else if (item === 'donationPolitical') value = Math.min(value, 10000);
            else if (item === 'easyEreceipt') value = Math.min(value, 50000);

            total += value;
        }
    });

    return total;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
function getDeductionBreakdown(plan) {
    const netIncome = incomeData.netIncome || 0;
    const breakdown = {};

    const items = ['lifeInsurance', 'healthInsurance', 'pensionInsurance', 'pvd', 'rmf',
                   'thaiEsg', 'thaiEsgx', 'homeLoan', 'donationDouble', 'donationPolitical', 'easyEreceipt'];

    const labels = {
        'lifeInsurance': '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        'healthInsurance': '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
        'pensionInsurance': '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç',
        'pvd': 'PVD',
        'rmf': 'RMF',
        'thaiEsg': 'Thai ESG',
        'thaiEsgx': 'Thai ESGx',
        'homeLoan': '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ö‡πâ‡∏≤‡∏ô',
        'donationDouble': '‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ 2x',
        'donationPolitical': '‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏û‡∏£‡∏£‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á',
        'easyEreceipt': 'Easy E-Receipt'
    };

    items.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);

        if (checkbox && slider && checkbox.checked) {
            let value = parseFloat(slider.value) || 0;

            // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô getPlanDeductions (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° combined limits ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
            if (item === 'pensionInsurance') value = Math.min(value, netIncome * 0.15, 200000);
            else if (item === 'pvd') value = Math.min(value, 500000);
            else if (item === 'rmf') value = Math.min(value, netIncome * 0.30, 500000);
            else if (item === 'thaiEsg') value = Math.min(value, netIncome * 0.30, 300000);
            else if (item === 'thaiEsgx') value = Math.min(value, netIncome * 0.30, 300000);
            else if (item === 'homeLoan') value = Math.min(value, 100000);
            else if (item === 'donationDouble') value = Math.min(value * 2, netIncome * 0.10);
            else if (item === 'donationPolitical') value = Math.min(value, 10000);
            else if (item === 'easyEreceipt') value = Math.min(value, 50000);

            if (value > 0) {
                breakdown[labels[item]] = value;
            }
        }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 100K limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    const insuranceTotal = (breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'] || 0) + (breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'] || 0);
    if (insuranceTotal > 100000) {
        // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 100K ‡πÇ‡∏î‡∏¢‡∏•‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
        const ratio = 100000 / insuranceTotal;
        if (breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï']) breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï'] *= ratio;
        if (breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û']) breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'] *= ratio;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 500K limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retirement funds
    const retirementTotal = (breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç'] || 0) + (breakdown['PVD'] || 0) + (breakdown['RMF'] || 0);
    if (retirementTotal > 500000) {
        // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 500K ‡πÇ‡∏î‡∏¢‡∏•‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
        const ratio = 500000 / retirementTotal;
        if (breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç']) breakdown['‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç'] *= ratio;
        if (breakdown['PVD']) breakdown['PVD'] *= ratio;
        if (breakdown['RMF']) breakdown['RMF'] *= ratio;
    }

    return breakdown;
}

function updatePlan1() {
    const netIncome = incomeData.netIncome || 0;
    const basicDed = basicDeductions.total || 0;
    const plan1Ded = getPlan1Deductions();
    const totalDed = basicDed + plan1Ded;
    const tax = calculateTax(netIncome, totalDed);
    const baselineTax = calculateTax(netIncome, basicDed);
    const savings = baselineTax - tax;

    document.getElementById('plan1TaxPreview').textContent = formatNumber(tax) + ' ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ';
    document.getElementById('plan1TaxMonthlyPreview').textContent = formatNumber(Math.round(tax / 12)) + ' ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
    document.getElementById('plan1SavingsPreview').textContent = '‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î: ' + formatNumber(savings) + ' ‡∏ö‡∏≤‡∏ó';
}

function updatePlan2() {
    const netIncome = incomeData.netIncome || 0;
    const basicDed = basicDeductions.total || 0;
    const plan2Ded = getPlan2Deductions();
    const totalDed = basicDed + plan2Ded;
    const tax = calculateTax(netIncome, totalDed);
    const baselineTax = calculateTax(netIncome, basicDed);
    const savings = baselineTax - tax;

    document.getElementById('plan2TaxPreview').textContent = formatNumber(tax) + ' ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ';
    document.getElementById('plan2TaxMonthlyPreview').textContent = formatNumber(Math.round(tax / 12)) + ' ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
    document.getElementById('plan2SavingsPreview').textContent = '‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î: ' + formatNumber(savings) + ' ‡∏ö‡∏≤‡∏ó';
}

// =============== Step 4: Final Results ===============

function calculateFinalResults() {
    const netIncome = incomeData.netIncome || 0;
    const basicDed = basicDeductions.total || 0;
    const plan1Ded = getPlan1Deductions();
    const plan2Ded = getPlan2Deductions();

    const baselineTax = calculateTax(netIncome, basicDed);
    const plan1Tax = calculateTax(netIncome, basicDed + plan1Ded);
    const plan2Tax = calculateTax(netIncome, basicDed + plan2Ded);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
    document.getElementById('finalBaselineTax').textContent = formatNumber(baselineTax) + ' ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ';
    document.getElementById('finalBaselineMonthly').textContent = formatNumber(baselineTax / 12) + ' ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';

    document.getElementById('finalPlan1Tax').textContent = formatNumber(plan1Tax) + ' ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ';
    document.getElementById('finalPlan1Monthly').textContent = formatNumber(plan1Tax / 12) + ' ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
    document.getElementById('finalPlan1Savings').textContent = formatNumber(baselineTax - plan1Tax);

    document.getElementById('finalPlan2Tax').textContent = formatNumber(plan2Tax) + ' ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ';
    document.getElementById('finalPlan2Monthly').textContent = formatNumber(plan2Tax / 12) + ' ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
    document.getElementById('finalPlan2Savings').textContent = formatNumber(baselineTax - plan2Tax);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    createFinalChart(baselineTax, plan1Tax, plan2Tax);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    createRecommendation(baselineTax, plan1Tax, plan2Tax, plan1Ded, plan2Ded);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    createDetailedTables();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Pie Charts
    createPieCharts();
}

function createFinalChart(baseline, plan1, plan2) {
    const ctx = document.getElementById('finalComparisonChart').getContext('2d');

    if (chartInstance) {
        chartInstance.destroy();
    }

    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô
    const plan1Breakdown = getDeductionBreakdown('plan1');
    const plan2Breakdown = getDeductionBreakdown('plan2');

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allItems = new Set([...Object.keys(plan1Breakdown), ...Object.keys(plan2Breakdown)]);

    // ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const colors = {
        '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï': '#FF6B6B',
        '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': '#4ECDC4',
        '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç': '#45B7D1',
        'PVD': '#96CEB4',
        'RMF': '#FFEAA7',
        'Thai ESG': '#DFE6E9',
        'Thai ESGx': '#74B9FF',
        '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ö‡πâ‡∏≤‡∏ô': '#A29BFE',
        '‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ 2x': '#FD79A8',
        '‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏û‡∏£‡∏£‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á': '#FDCB6E',
        'Easy E-Receipt': '#6C5CE7'
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á datasets ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö stacked bar chart
    const datasets = [];

    allItems.forEach(item => {
        datasets.push({
            label: item,
            data: [
                0, // Baseline ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
                plan1Breakdown[item] || 0,
                plan2Breakdown[item] || 0
            ],
            backgroundColor: colors[item] || '#95A5A6',
            borderColor: colors[item] || '#95A5A6',
            borderWidth: 1
        });
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° dataset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á)
    datasets.unshift({
        label: '‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢',
        data: [baseline, plan1, plan2],
        backgroundColor: 'rgba(231, 76, 60, 0.7)',
        borderColor: 'rgba(231, 76, 60, 1)',
        borderWidth: 2
    });

    chartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['‡πÑ‡∏°‡πà‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°', '‡πÅ‡∏ú‡∏ô 1', '‡πÅ‡∏ú‡∏ô 2'],
            datasets: datasets
        },
        options: {
            responsive: true,
            maintainAspectRatio: true,
            scales: {
                x: {
                    stacked: false
                },
                y: {
                    stacked: false,
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return formatNumber(value) + ' ‡∏ö‡∏≤‡∏ó';
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'top',
                    labels: {
                        boxWidth: 12,
                        font: {
                            size: 10
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const label = context.dataset.label || '';
                            const value = context.parsed.y;
                            return label + ': ' + formatNumber(value) + ' ‡∏ö‡∏≤‡∏ó';
                        }
                    }
                },
                title: {
                    display: true,
                    text: '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô',
                    font: {
                        size: 16,
                        weight: 'bold'
                    }
                }
            }
        }
    });
}

function createRecommendation(baseline, plan1, plan2, plan1Ded, plan2Ded) {
    const savings1 = baseline - plan1;
    const savings2 = baseline - plan2;

    let bestPlan = '';
    let html = '<h3>üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>';

    if (savings2 > savings1 && savings2 > 10000) {
        bestPlan = '‡πÅ‡∏ú‡∏ô 2';
        html += `
            <p><strong>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÅ‡∏ú‡∏ô 2</strong> ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì</p>
            <ul>
                <li>‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á ${formatNumber(savings2)} ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ</li>
                <li>‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô/‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°: ${formatNumber(plan2Ded)} ‡∏ö‡∏≤‡∏ó</li>
                <li>‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏õ‡∏µ 2568 (Thai ESGx, ‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ 2 ‡πÄ‡∏ó‡πà‡∏≤)</li>
                <li>ROI ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ: ${((savings2/plan2Ded)*100).toFixed(1)}%</li>
            </ul>
        `;
    } else if (savings1 > savings2 && savings1 > 5000) {
        bestPlan = '‡πÅ‡∏ú‡∏ô 1';
        html += `
            <p><strong>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÅ‡∏ú‡∏ô 1</strong> ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì</p>
            <ul>
                <li>‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ ${formatNumber(savings1)} ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ</li>
                <li>‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô/‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°: ${formatNumber(plan1Ded)} ‡∏ö‡∏≤‡∏ó</li>
                <li>‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå</li>
                <li>ROI ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ: ${((savings1/plan1Ded)*100).toFixed(1)}%</li>
            </ul>
        `;
    } else {
        html += `
            <p><strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            <ul>
                <li>‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏ô‡∏±‡∏Å</li>
                <li>‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</li>
                <li>‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏¢‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô</li>
            </ul>
        `;
    }

    document.getElementById('recommendation').innerHTML = html;
}

function createDetailedTables() {
    let html = '';

    // Baseline
    html += `
        <h4>üîµ ‡πÑ‡∏°‡πà‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°</h4>
        <table>
            <tr><td>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</td><td>${formatNumber(incomeData.netIncome)} ‡∏ö‡∏≤‡∏ó</td></tr>
            <tr><td>‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</td><td>${formatNumber(basicDeductions.total)} ‡∏ö‡∏≤‡∏ó</td></tr>
            <tr><td>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô</td><td>${formatNumber(incomeData.netIncome - basicDeductions.total)} ‡∏ö‡∏≤‡∏ó</td></tr>
        </table>
    `;

    // Plan 1
    const plan1Ded = getPlan1Deductions();
    html += `
        <h4>üü¢ ‡πÅ‡∏ú‡∏ô 1</h4>
        <table>
            <tr><td>‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</td><td>${formatNumber(basicDeductions.total)} ‡∏ö‡∏≤‡∏ó</td></tr>
            <tr><td>‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</td><td>${formatNumber(plan1Ded)} ‡∏ö‡∏≤‡∏ó</td></tr>
            <tr><td>‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏£‡∏ß‡∏°</td><td>${formatNumber(basicDeductions.total + plan1Ded)} ‡∏ö‡∏≤‡∏ó</td></tr>
        </table>
    `;

    // Plan 2
    const plan2Ded = getPlan2Deductions();
    html += `
        <h4>üü° ‡πÅ‡∏ú‡∏ô 2</h4>
        <table>
            <tr><td>‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</td><td>${formatNumber(basicDeductions.total)} ‡∏ö‡∏≤‡∏ó</td></tr>
            <tr><td>‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</td><td>${formatNumber(plan2Ded)} ‡∏ö‡∏≤‡∏ó</td></tr>
            <tr><td>‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏£‡∏ß‡∏°</td><td>${formatNumber(basicDeductions.total + plan2Ded)} ‡∏ö‡∏≤‡∏ó</td></tr>
        </table>
    `;

    document.getElementById('detailedTables').innerHTML = html;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Pie Charts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô
let pieChart1 = null;
let pieChart2 = null;

function createPieCharts() {
    const plan1Breakdown = getDeductionBreakdown('plan1');
    const plan2Breakdown = getDeductionBreakdown('plan2');

    // ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å)
    const colors = {
        '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï': '#FF6B6B',
        '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': '#4ECDC4',
        '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç': '#45B7D1',
        'PVD': '#96CEB4',
        'RMF': '#FFEAA7',
        'Thai ESG': '#DFE6E9',
        'Thai ESGx': '#74B9FF',
        '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ö‡πâ‡∏≤‡∏ô': '#A29BFE',
        '‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ 2x': '#FD79A8',
        '‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏û‡∏£‡∏£‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á': '#FDCB6E',
        'Easy E-Receipt': '#6C5CE7'
    };

    // Pie Chart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Plan 1
    const ctx1 = document.getElementById('plan1PieChart');
    if (ctx1) {
        if (pieChart1) pieChart1.destroy();

        const plan1Labels = Object.keys(plan1Breakdown);
        const plan1Data = Object.values(plan1Breakdown);
        const plan1Colors = plan1Labels.map(label => colors[label] || '#95A5A6');

        if (plan1Data.length > 0) {
            pieChart1 = new Chart(ctx1, {
                type: 'pie',
                data: {
                    labels: plan1Labels,
                    datasets: [{
                        data: plan1Data,
                        backgroundColor: plan1Colors,
                        borderColor: '#fff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                font: { size: 11 }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return label + ': ' + formatNumber(value) + ' ‡∏ö‡∏≤‡∏ó (' + percentage + '%)';
                                }
                            }
                        },
                        title: {
                            display: true,
                            text: '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô - ‡πÅ‡∏ú‡∏ô 1',
                            font: { size: 14, weight: 'bold' }
                        }
                    }
                }
            });
        }
    }

    // Pie Chart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Plan 2
    const ctx2 = document.getElementById('plan2PieChart');
    if (ctx2) {
        if (pieChart2) pieChart2.destroy();

        const plan2Labels = Object.keys(plan2Breakdown);
        const plan2Data = Object.values(plan2Breakdown);
        const plan2Colors = plan2Labels.map(label => colors[label] || '#95A5A6');

        if (plan2Data.length > 0) {
            pieChart2 = new Chart(ctx2, {
                type: 'pie',
                data: {
                    labels: plan2Labels,
                    datasets: [{
                        data: plan2Data,
                        backgroundColor: plan2Colors,
                        borderColor: '#fff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                boxWidth: 12,
                                font: { size: 11 }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return label + ': ' + formatNumber(value) + ' ‡∏ö‡∏≤‡∏ó (' + percentage + '%)';
                                }
                            }
                        },
                        title: {
                            display: true,
                            text: '‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô - ‡πÅ‡∏ú‡∏ô 2',
                            font: { size: 14, weight: 'bold' }
                        }
                    }
                }
            });
        }
    }
}

// =============== Quick Value Setters ===============

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì available limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100,000)
function getAvailableInsuranceLimit(plan, currentItem) {
    const INSURANCE_LIMIT = 100000;
    let used = 0;

    const insuranceItems = ['lifeInsurance', 'healthInsurance'];

    insuranceItems.forEach(item => {
        if (item === currentItem) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤

        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);

        if (checkbox && slider && checkbox.checked) {
            used += parseFloat(slider.value) || 0;
        }
    });

    const available = INSURANCE_LIMIT - used;
    return Math.max(0, available);
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì available limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PVD+RMF+Pension (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500,000)
function getAvailableRetirementLimit(plan, currentItem) {
    const RETIREMENT_LIMIT = 500000;
    let used = 0;

    const retirementItems = ['pensionInsurance', 'pvd', 'rmf'];

    retirementItems.forEach(item => {
        if (item === currentItem) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤

        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);

        if (checkbox && slider && checkbox.checked) {
            used += parseFloat(slider.value) || 0;
        }
    });

    const available = RETIREMENT_LIMIT - used;
    return Math.max(0, available);
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï slider limits ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
function updateInsuranceSliderLimits(plan) {
    const INSURANCE_LIMIT = 100000;
    const insuranceItems = ['lifeInsurance', 'healthInsurance'];

    insuranceItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);
        const sliderDiv = document.getElementById(`${plan}_${item}_slider`);

        if (!checkbox || !slider || !sliderDiv) return;

        let currentValue = parseFloat(slider.value) || 0;

        // ‡∏ñ‡πâ‡∏≤ current value ‡πÄ‡∏Å‡∏¥‡∏ô 100K ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0
        if (currentValue > INSURANCE_LIMIT) {
            currentValue = 0;
            slider.value = 0;
            const displaySpan = sliderDiv.querySelector('.slider-display');
            if (displaySpan) displaySpan.textContent = '0 ‡∏ö‡∏≤‡∏ó';
        }

        const available = getAvailableInsuranceLimit(plan, item);

        // ‡∏ï‡∏±‡πâ‡∏á max ‡∏Ç‡∏≠‡∏á slider = available (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏ß‡∏Å currentValue ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ available ‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß)
        const newMax = Math.min(INSURANCE_LIMIT, available);
        slider.max = newMax;

        // ‚ö†Ô∏è CRITICAL: ‡∏ñ‡πâ‡∏≤ current value ‡πÄ‡∏Å‡∏¥‡∏ô newMax ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤
        if (currentValue > newMax) {
            slider.value = newMax;
            currentValue = newMax;
            const displaySpan = sliderDiv.querySelector('.slider-display');
            if (displaySpan) displaySpan.textContent = formatNumber(newMax) + ' ‡∏ö‡∏≤‡∏ó';
        }

        // ‡∏ñ‡πâ‡∏≤ available = 0 ‡πÅ‡∏•‡∏∞ current = 0 ‡∏Å‡πá disable
        if (available === 0 && currentValue === 0) {
            slider.disabled = true;
            slider.style.opacity = '0.5';
            slider.style.cursor = 'not-allowed';
        } else {
            slider.disabled = false;
            slider.style.opacity = '1';
            slider.style.cursor = 'pointer';
        }
    });
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
function updateInsuranceWarnings(plan) {
    const INSURANCE_LIMIT = 100000;
    const insuranceItems = ['lifeInsurance', 'healthInsurance'];
    let totalUsed = 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
    insuranceItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);

        if (checkbox && slider && checkbox.checked) {
            totalUsed += parseFloat(slider.value) || 0;
        }
    });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    insuranceItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);
        const sliderDiv = document.getElementById(`${plan}_${item}_slider`);

        if (!checkbox || !sliderDiv) return;

        const warningSpan = sliderDiv.querySelector('.limit-warning');
        if (!warningSpan) return;

        const currentValue = parseFloat(slider.value) || 0;
        const available = getAvailableInsuranceLimit(plan, item);

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà check
        if (checkbox.checked) {
            const remaining = INSURANCE_LIMIT - totalUsed;

            if (totalUsed > INSURANCE_LIMIT) {
                warningSpan.textContent = `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 100,000! (‡∏£‡∏ß‡∏° ${formatNumber(totalUsed)} ‡∏ö‡∏≤‡∏ó)`;
                warningSpan.style.color = '#f44336';
                warningSpan.style.fontWeight = 'bold';
            } else if (available === 0 && currentValue === 0) {
                warningSpan.textContent = `üö´ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 100,000 ‡πÅ‡∏•‡πâ‡∏ß`;
                warningSpan.style.color = '#f44336';
                warningSpan.style.fontWeight = 'bold';
            } else if (available === 0) {
                warningSpan.textContent = `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 100,000 ‡πÅ‡∏•‡πâ‡∏ß`;
                warningSpan.style.color = '#ff9800';
                warningSpan.style.fontWeight = 'bold';
            } else if (remaining < 10000) {
                warningSpan.textContent = `‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(remaining)} ‡∏ö‡∏≤‡∏ó ‡∏à‡∏≤‡∏Å 100,000`;
                warningSpan.style.color = '#ff9800';
            } else {
                warningSpan.textContent = `‚úì ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(remaining)} ‡∏ö‡∏≤‡∏ó`;
                warningSpan.style.color = '#4caf50';
            }
        } else {
            warningSpan.textContent = '';
        }
    });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï slider limits
    updateInsuranceSliderLimits(plan);
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï slider limits ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retirement funds
function updateRetirementSliderLimits(plan) {
    const RETIREMENT_LIMIT = 500000;
    const retirementItems = ['pensionInsurance', 'pvd', 'rmf'];
    const netIncome = incomeData.netIncome || 0;

    retirementItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);
        const sliderDiv = document.getElementById(`${plan}_${item}_slider`);

        if (!checkbox || !slider || !sliderDiv) return;

        let currentValue = parseFloat(slider.value) || 0;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì max ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        let itemMax = 500000; // default
        if (item === 'pensionInsurance') {
            itemMax = Math.min(netIncome * 0.15, 200000);
        } else if (item === 'pvd') {
            itemMax = 500000;
        } else if (item === 'rmf') {
            itemMax = Math.min(netIncome * 0.30, 500000);
        }

        // ‡∏ñ‡πâ‡∏≤ current value ‡πÄ‡∏Å‡∏¥‡∏ô itemMax ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô 0
        if (currentValue > itemMax) {
            currentValue = 0;
            slider.value = 0;
            const displaySpan = sliderDiv.querySelector('.slider-display');
            if (displaySpan) displaySpan.textContent = '0 ‡∏ö‡∏≤‡∏ó';
        }

        const available = getAvailableRetirementLimit(plan, item);

        // ‡∏ï‡∏±‡πâ‡∏á max ‡∏Ç‡∏≠‡∏á slider = available (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏ß‡∏Å currentValue ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ available ‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß)
        const newMax = Math.min(itemMax, available);
        slider.max = newMax;

        // ‚ö†Ô∏è CRITICAL: ‡∏ñ‡πâ‡∏≤ current value ‡πÄ‡∏Å‡∏¥‡∏ô newMax ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤
        if (currentValue > newMax) {
            slider.value = newMax;
            currentValue = newMax;
            const displaySpan = sliderDiv.querySelector('.slider-display');
            if (displaySpan) displaySpan.textContent = formatNumber(newMax) + ' ‡∏ö‡∏≤‡∏ó';
        }

        // ‡∏ñ‡πâ‡∏≤ available = 0 ‡πÅ‡∏•‡∏∞ current = 0 ‡∏Å‡πá disable
        if (available === 0 && currentValue === 0) {
            slider.disabled = true;
            slider.style.opacity = '0.5';
            slider.style.cursor = 'not-allowed';
        } else {
            slider.disabled = false;
            slider.style.opacity = '1';
            slider.style.cursor = 'pointer';
        }
    });
}

// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retirement funds
function updateRetirementWarnings(plan) {
    const RETIREMENT_LIMIT = 500000;
    const retirementItems = ['pensionInsurance', 'pvd', 'rmf'];
    let totalUsed = 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
    retirementItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);

        if (checkbox && slider && checkbox.checked) {
            totalUsed += parseFloat(slider.value) || 0;
        }
    });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    retirementItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);
        const sliderDiv = document.getElementById(`${plan}_${item}_slider`);

        if (!checkbox || !sliderDiv) return;

        const warningSpan = sliderDiv.querySelector('.limit-warning');
        if (!warningSpan) return;

        const currentValue = parseFloat(slider.value) || 0;
        const available = getAvailableRetirementLimit(plan, item);

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà check
        if (checkbox.checked) {
            const remaining = RETIREMENT_LIMIT - totalUsed;

            if (totalUsed > RETIREMENT_LIMIT) {
                warningSpan.textContent = `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 500,000! (‡∏£‡∏ß‡∏° ${formatNumber(totalUsed)} ‡∏ö‡∏≤‡∏ó)`;
                warningSpan.style.color = '#f44336';
                warningSpan.style.fontWeight = 'bold';
            } else if (available === 0 && currentValue === 0) {
                warningSpan.textContent = `üö´ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 500,000 ‡πÅ‡∏•‡πâ‡∏ß`;
                warningSpan.style.color = '#f44336';
                warningSpan.style.fontWeight = 'bold';
            } else if (available === 0) {
                warningSpan.textContent = `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏ï‡πá‡∏°‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 500,000 ‡πÅ‡∏•‡πâ‡∏ß`;
                warningSpan.style.color = '#ff9800';
                warningSpan.style.fontWeight = 'bold';
            } else if (remaining < 50000) {
                warningSpan.textContent = `‚ö†Ô∏è ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(remaining)} ‡∏ö‡∏≤‡∏ó ‡∏à‡∏≤‡∏Å 500,000`;
                warningSpan.style.color = '#ff9800';
            } else {
                warningSpan.textContent = `‚úì ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(remaining)} ‡∏ö‡∏≤‡∏ó`;
                warningSpan.style.color = '#4caf50';
            }
        } else {
            warningSpan.textContent = '';
        }
    });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï slider limits
    updateRetirementSliderLimits(plan);
}

function setQuickValue(plan, item, value, percent) {
    const slider = document.getElementById(`${plan}_${item}`);
    const sliderDiv = document.getElementById(`${plan}_${item}_slider`);
    const displaySpan = sliderDiv.querySelector('.slider-display');

    if (!slider || !sliderDiv || !displaySpan) {
        console.error(`Cannot find elements for ${plan}_${item}`);
        return;
    }

    let finalValue;

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'max-available'
    if (value === 'max-available') {
        const netIncome = incomeData.netIncome || 0;

        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100K)
        if (['lifeInsurance', 'healthInsurance'].includes(item)) {
            const available = getAvailableInsuranceLimit(plan, item);
            finalValue = Math.min(100000, available);
        }
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retirement funds (‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500K)
        else if (['pensionInsurance', 'pvd', 'rmf'].includes(item)) {
            const available = getAvailableRetirementLimit(plan, item);

            if (item === 'pensionInsurance') {
                // ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç: max 15% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ, ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200,000, ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô available
                finalValue = Math.min(netIncome * 0.15, 200000, available);
            } else if (item === 'pvd') {
                // PVD: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô available
                finalValue = Math.min(500000, available);
            } else if (item === 'rmf') {
                // RMF: max 30% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ, ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 500,000, ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô available
                finalValue = Math.min(netIncome * 0.30, 500000, available);
            }
        }
        finalValue = Math.round(finalValue);
    }
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
    else if (value === 'percent' && percent) {
        const netIncome = incomeData.netIncome || 0;
        finalValue = Math.round(netIncome * (percent / 100));

        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô max ‡∏Ç‡∏≠‡∏á slider
        const maxValue = parseInt(slider.max);
        finalValue = Math.min(finalValue, maxValue);

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô retirement fund ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ available ‡∏î‡πâ‡∏ß‡∏¢
        if (['pensionInsurance', 'pvd', 'rmf'].includes(item)) {
            const available = getAvailableRetirementLimit(plan, item);
            finalValue = Math.min(finalValue, available);
        }
    } else {
        finalValue = value;
    }

    // Set slider value
    slider.value = finalValue;

    // Update display
    if (item === 'donationDouble') {
        displaySpan.textContent = `${formatNumber(finalValue)} ‡∏ö‡∏≤‡∏ó ‚Üí ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô ${formatNumber(finalValue * 2)} ‡∏ö‡∏≤‡∏ó (2x)`;
    } else {
        displaySpan.textContent = formatNumber(finalValue) + ' ‡∏ö‡∏≤‡∏ó';
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô insurance
    if (['lifeInsurance', 'healthInsurance'].includes(item)) {
        updateInsuranceWarnings(plan);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô retirement fund
    if (['pensionInsurance', 'pvd', 'rmf'].includes(item)) {
        updateRetirementWarnings(plan);
    }

    // Trigger update
    if (plan === 'plan1') {
        updatePlan1();
    } else if (plan === 'plan2') {
        updatePlan2();
    }

    console.log(`Quick value set: ${plan}_${item} = ${finalValue}`);
}

// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏õ‡πá‡∏ô 0
function resetItemValue(plan, item) {
    const slider = document.getElementById(`${plan}_${item}`);
    const sliderDiv = document.getElementById(`${plan}_${item}_slider`);
    const displaySpan = sliderDiv?.querySelector('.slider-display');

    if (!slider || !sliderDiv) {
        console.error(`Cannot find elements for ${plan}_${item}`);
        return;
    }

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0
    slider.value = 0;
    if (displaySpan) displaySpan.textContent = '0 ‡∏ö‡∏≤‡∏ó';

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï limits ‡πÅ‡∏•‡∏∞ warnings ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if (['lifeInsurance', 'healthInsurance'].includes(item)) {
        updateInsuranceSliderLimits(plan);
        updateInsuranceWarnings(plan);
    } else if (['pensionInsurance', 'pvd', 'rmf'].includes(item)) {
        updateRetirementSliderLimits(plan);
        updateRetirementWarnings(plan);
    }

    // Trigger update
    if (plan === 'plan1') {
        updatePlan1();
    } else if (plan === 'plan2') {
        updatePlan2();
    }

    console.log(`‚úÖ Reset: ${plan}_${item} = 0`);
}

// =============== Event Listeners ===============

// ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á DOMContentLoaded ‡πÅ‡∏•‡∏∞ window.onload ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    // DOM already loaded
    initializeApp();
}

function initializeApp() {
    console.log('üöÄ Application starting...');
    console.log('Document ready state:', document.readyState);

    // Step 1: Income sliders
    console.log('üìä Setting up Step 1 sliders...');
    setupSlider('salary', 'salarySlider', 'salaryDisplay', updateIncomePreview);
    setupSlider('bonus', 'bonusSlider', 'bonusDisplay', updateIncomePreview);

    // Step 2: Basic deduction sliders
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Setting up Step 2 sliders...');
    setupSlider('childCount', 'childSlider', 'childDisplay', function() {
        const count = document.getElementById('childSlider').value;
        document.getElementById('childDeductionDisplay').textContent = formatNumber(count * 30000);
        updateAndSaveBasicDeductions();
    });
    setupSlider('socialSecurity', 'socialSecuritySlider', 'socialSecurityDisplay', updateAndSaveBasicDeductions);

    // Parent options toggle
    document.getElementById('parentDeduction').addEventListener('change', function() {
        document.getElementById('parentOptions').style.display = this.checked ? 'block' : 'none';
        updateAndSaveBasicDeductions();
    });

    document.getElementById('parentSpouseDeduction').addEventListener('change', function() {
        document.getElementById('parentSpouseOptions').style.display = this.checked ? 'block' : 'none';
        updateAndSaveBasicDeductions();
    });

    document.getElementById('spouseDeduction').addEventListener('change', updateAndSaveBasicDeductions);
    document.getElementById('parentCount').addEventListener('change', updateAndSaveBasicDeductions);
    document.getElementById('parentSpouseCount').addEventListener('change', updateAndSaveBasicDeductions);

    // Step 3: Plan 1 checkboxes and sliders
    console.log('üü¢ Setting up Plan 1 items...');
    setupPlanItems('plan1', ['lifeInsurance', 'healthInsurance', 'pensionInsurance', 'pvd', 'rmf', 'thaiEsg', 'thaiEsgx', 'homeLoan', 'donationDouble', 'donationPolitical', 'easyEreceipt'], updatePlan1);

    // Step 3: Plan 2 checkboxes and sliders
    console.log('üü° Setting up Plan 2 items...');
    setupPlanItems('plan2', ['lifeInsurance', 'healthInsurance', 'pensionInsurance', 'pvd', 'rmf', 'thaiEsg', 'thaiEsgx', 'homeLoan', 'donationDouble', 'donationPolitical', 'easyEreceipt'], updatePlan2);

    // Load saved data AFTER setting up listeners
    console.log('üíæ Loading saved data...');
    loadSavedData();

    // Load Step 3 plan data (Plan 1 & Plan 2)
    console.log('üìÇ Loading Step 3 plan data...');
    loadPlanData();

    // Check if data from salary slips
    checkAndLoadSalarySlipsData();

    // Initial updates
    console.log('üîÑ Initial updates...');
    updateIncomePreview();
    updateBasicDeductionPreview();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ slider limits ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á plan1 ‡πÅ‡∏•‡∏∞ plan2
    console.log('üéöÔ∏è Setting up initial slider limits...');

    // Fix saved data ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏ô limits
    fixSliderLimits('plan1');
    fixSliderLimits('plan2');

    updateInsuranceSliderLimits('plan1');
    updateInsuranceWarnings('plan1');
    updateRetirementSliderLimits('plan1');
    updateRetirementWarnings('plan1');

    updateInsuranceSliderLimits('plan2');
    updateInsuranceWarnings('plan2');
    updateRetirementSliderLimits('plan2');
    updateRetirementWarnings('plan2');

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Step 3 & 4
    console.log('üßÆ Updating scenarios...');
    updateAllScenarios();

    console.log('‚úÖ Application ready!');
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ slider ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô limits (‡∏à‡∏≤‡∏Å saved data ‡πÄ‡∏Å‡πà‡∏≤)
function fixSliderLimits(plan) {
    const netIncome = incomeData.netIncome || 0;

    // Fix insurance (100K limit)
    const insuranceItems = ['lifeInsurance', 'healthInsurance'];
    let insuranceTotal = 0;

    insuranceItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);
        if (checkbox && slider && checkbox.checked) {
            insuranceTotal += parseFloat(slider.value) || 0;
        }
    });

    if (insuranceTotal > 100000) {
        console.warn(`‚ö†Ô∏è ${plan} insurance total exceeds 100K, resetting...`);
        insuranceItems.forEach(item => {
            const slider = document.getElementById(`${plan}_${item}`);
            const sliderDiv = document.getElementById(`${plan}_${item}_slider`);
            if (slider && sliderDiv) {
                slider.value = 0;
                const displaySpan = sliderDiv.querySelector('.slider-display');
                if (displaySpan) displaySpan.textContent = '0 ‡∏ö‡∏≤‡∏ó';
            }
        });
    }

    // Fix retirement funds (500K limit)
    const retirementItems = ['pensionInsurance', 'pvd', 'rmf'];
    let retirementTotal = 0;

    retirementItems.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);
        if (checkbox && slider && checkbox.checked) {
            retirementTotal += parseFloat(slider.value) || 0;
        }
    });

    if (retirementTotal > 500000) {
        console.warn(`‚ö†Ô∏è ${plan} retirement total exceeds 500K, resetting...`);
        retirementItems.forEach(item => {
            const slider = document.getElementById(`${plan}_${item}`);
            const sliderDiv = document.getElementById(`${plan}_${item}_slider`);
            if (slider && sliderDiv) {
                slider.value = 0;
                const displaySpan = sliderDiv.querySelector('.slider-display');
                if (displaySpan) displaySpan.textContent = '0 ‡∏ö‡∏≤‡∏ó';
            }
        });
    }
}

function setupSlider(inputId, sliderId, displayId, callback) {
    const input = document.getElementById(inputId);
    const slider = document.getElementById(sliderId);
    const display = document.getElementById(displayId);

    if (!input || !slider || !display) {
        console.error(`‚ùå setupSlider failed: Missing element`, {inputId, sliderId, displayId});
        return;
    }

    console.log(`‚úÖ Setting up slider: ${inputId}`);

    // Slider to input
    slider.addEventListener('input', function() {
        const value = this.value;
        input.value = formatNumber(value);
        display.textContent = formatNumber(value);
        console.log(`üéöÔ∏è Slider ${inputId} changed to:`, value);
        if (callback) callback();
    });

    // Input to slider
    input.addEventListener('input', function() {
        const value = parseNumberWithComma(this.value);
        slider.value = value;
        display.textContent = formatNumber(value);
        console.log(`‚å®Ô∏è Input ${inputId} changed to:`, value);
        if (callback) callback();
    });

    // Set initial value
    if (slider.value) {
        input.value = formatNumber(slider.value);
        display.textContent = formatNumber(slider.value);
        console.log(`üéØ Initial value for ${inputId}:`, slider.value);
    }
}

function setupPlanItems(plan, items, updateCallback) {
    console.log(`Setting up ${plan} with ${items.length} items`);

    items.forEach(item => {
        const checkbox = document.getElementById(`${plan}_${item}_check`);
        const slider = document.getElementById(`${plan}_${item}`);
        const sliderDiv = document.getElementById(`${plan}_${item}_slider`);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å element ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if (!checkbox || !slider || !sliderDiv) {
            console.warn(`‚ö†Ô∏è Missing element for ${plan}_${item}`, {
                checkbox: !!checkbox,
                slider: !!slider,
                sliderDiv: !!sliderDiv
            });
            return;
        }

        // Initialize slider display
        const displaySpan = sliderDiv.querySelector('.slider-display');
        if (!displaySpan) {
            console.warn(`‚ö†Ô∏è Missing display span for ${plan}_${item}`);
            return;
        }

        console.log(`‚úÖ Setup ${plan}_${item}`);

        const initialValue = parseFloat(slider.value) || 0;
        if (item === 'donationDouble') {
            displaySpan.textContent = `${formatNumber(initialValue)} ‡∏ö‡∏≤‡∏ó ‚Üí ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô ${formatNumber(initialValue * 2)} ‡∏ö‡∏≤‡∏ó (2x)`;
        } else {
            displaySpan.textContent = formatNumber(initialValue) + ' ‡∏ö‡∏≤‡∏ó';
        }

        // Checkbox toggle - ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô slider
        checkbox.addEventListener('change', function() {
            console.log(`‚òëÔ∏è Checkbox ${plan}_${item} changed:`, this.checked);
            if (this.checked) {
                sliderDiv.style.display = 'flex';
                console.log(`üëÅÔ∏è Showing slider for ${plan}_${item}`);

                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ slider limits ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î checkbox
                if (['lifeInsurance', 'healthInsurance'].includes(item)) {
                    updateInsuranceSliderLimits(plan);
                    updateInsuranceWarnings(plan);
                } else if (['pensionInsurance', 'pvd', 'rmf'].includes(item)) {
                    updateRetirementSliderLimits(plan);
                    updateRetirementWarnings(plan);
                }
            } else {
                sliderDiv.style.display = 'none';
                console.log(`üôà Hiding slider for ${plan}_${item}`);

                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î checkbox
                slider.value = 0;
                if (item === 'donationDouble') {
                    displaySpan.textContent = '0 ‡∏ö‡∏≤‡∏ó ‚Üí ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô 0 ‡∏ö‡∏≤‡∏ó (2x)';
                } else {
                    displaySpan.textContent = '0 ‡∏ö‡∏≤‡∏ó';
                }

                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï limits ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                if (['lifeInsurance', 'healthInsurance'].includes(item)) {
                    updateInsuranceSliderLimits(plan);
                    updateInsuranceWarnings(plan);
                } else if (['pensionInsurance', 'pvd', 'rmf'].includes(item)) {
                    updateRetirementSliderLimits(plan);
                    updateRetirementWarnings(plan);
                }
            }

            if (updateCallback) updateCallback();
        });

        // Slider change - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        slider.addEventListener('input', function() {
            const value = parseFloat(this.value) || 0;
            console.log(`üéöÔ∏è Slider ${plan}_${item} changed to:`, value);

            if (item === 'donationDouble') {
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô 2 ‡πÄ‡∏ó‡πà‡∏≤
                displaySpan.textContent = `${formatNumber(value)} ‡∏ö‡∏≤‡∏ó ‚Üí ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô ${formatNumber(value * 2)} ‡∏ö‡∏≤‡∏ó (2x)`;
            } else {
                displaySpan.textContent = formatNumber(value) + ' ‡∏ö‡∏≤‡∏ó';
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞ limits ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô insurance
            if (['lifeInsurance', 'healthInsurance'].includes(item)) {
                updateInsuranceSliderLimits(plan);
                updateInsuranceWarnings(plan);
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞ limits ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô retirement fund
            if (['pensionInsurance', 'pvd', 'rmf'].includes(item)) {
                updateRetirementSliderLimits(plan);
                updateRetirementWarnings(plan);
            }

            if (updateCallback) updateCallback();
        });
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÉ‡∏´‡∏°‡πà
function toggleDeductionRow(plan, item) {
    const checkbox = document.getElementById(`${plan}_${item}_check`);
    const container = document.getElementById(`${plan}_${item}_container`);
    const slider = document.getElementById(`${plan}_${item}`);
    const displaySpan = document.getElementById(`${plan}_${item}_display`);

    if (!checkbox || !container || !slider || !displaySpan) {
        console.warn(`‚ö†Ô∏è Missing elements for ${plan}_${item}`);
        return;
    }

    if (checkbox.checked) {
        container.style.display = 'block';
        console.log(`üëÅÔ∏è Showing slider for ${plan}_${item}`);
    } else {
        container.style.display = 'none';
        slider.value = 0;
        displaySpan.textContent = '0';
        console.log(`üôà Hiding slider for ${plan}_${item}`);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï max ‡∏Ç‡∏≠‡∏á slider ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    updateSliderLimits(plan);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏£‡∏ß‡∏°
    updateLimitDisplay(plan);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    updateAllScenarios();

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    savePlanData();
}

function updateDeductionValue(plan, item) {
    const slider = document.getElementById(`${plan}_${item}`);
    const displaySpan = document.getElementById(`${plan}_${item}_display`);

    if (!slider || !displaySpan) {
        console.warn(`‚ö†Ô∏è Missing elements for updating ${plan}_${item}`);
        return;
    }

    const value = parseFloat(slider.value) || 0;
    displaySpan.textContent = formatNumber(value);
    console.log(`üéöÔ∏è Updated ${plan}_${item} to:`, value);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï max ‡∏Ç‡∏≠‡∏á slider ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    updateSliderLimits(plan);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏£‡∏ß‡∏°
    updateLimitDisplay(plan);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    updateAllScenarios();

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    savePlanData();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï max ‡∏Ç‡∏≠‡∏á slider ‡∏ï‡∏≤‡∏°‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function updateSliderLimits(plan) {
    const netIncome = incomeData.netIncome || 0;

    // === ‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô 100,000 ===
    const lifeInsCheck = document.getElementById(`${plan}_lifeInsurance_check`)?.checked || false;
    const healthInsCheck = document.getElementById(`${plan}_healthInsurance_check`)?.checked || false;
    const lifeInsSlider = document.getElementById(`${plan}_lifeInsurance`);
    const healthInsSlider = document.getElementById(`${plan}_healthInsurance`);

    if (lifeInsSlider && healthInsSlider) {
        const lifeInsValue = lifeInsCheck ? (parseFloat(lifeInsSlider.value) || 0) : 0;
        const healthInsValue = healthInsCheck ? (parseFloat(healthInsSlider.value) || 0) : 0;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£ (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞ checked ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß)
        const lifeInsMax = Math.min(100000, 100000 - healthInsValue);
        const healthInsMax = Math.min(100000, 100000 - lifeInsValue);

        lifeInsSlider.max = lifeInsMax;
        healthInsSlider.max = healthInsMax;

        console.log(`${plan} ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô: life=${lifeInsValue}/${lifeInsMax}, health=${healthInsValue}/${healthInsMax}`);

        // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô max ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏•‡∏á
        if (lifeInsValue > lifeInsMax) {
            lifeInsSlider.value = lifeInsMax;
            document.getElementById(`${plan}_lifeInsurance_display`).textContent = formatNumber(lifeInsMax);
        }
        if (healthInsValue > healthInsMax) {
            healthInsSlider.value = healthInsMax;
            document.getElementById(`${plan}_healthInsurance_display`).textContent = formatNumber(healthInsMax);
        }
    }

    // === ‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏Å‡∏•‡∏∏‡πà‡∏° 500,000 (PVD + RMF + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç) ===
    const pensionCheck = document.getElementById(`${plan}_pensionInsurance_check`)?.checked || false;
    const pvdCheck = document.getElementById(`${plan}_pvd_check`)?.checked || false;
    const rmfCheck = document.getElementById(`${plan}_rmf_check`)?.checked || false;

    const pensionSlider = document.getElementById(`${plan}_pensionInsurance`);
    const pvdSlider = document.getElementById(`${plan}_pvd`);
    const rmfSlider = document.getElementById(`${plan}_rmf`);

    if (pensionSlider && pvdSlider && rmfSlider) {
        let pensionValue = pensionCheck ? (parseFloat(pensionSlider.value) || 0) : 0;
        let pvdValue = pvdCheck ? (parseFloat(pvdSlider.value) || 0) : 0;
        let rmfValue = rmfCheck ? (parseFloat(rmfSlider.value) || 0) : 0;

        let totalRetirement = pensionValue + pvdValue + rmfValue;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì max ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
        const pensionIndividualMax = Math.min(netIncome * 0.15, 200000);
        const pvdIndividualMax = 500000;
        const rmfIndividualMax = Math.min(netIncome * 0.30, 500000);

        // ‚ö†Ô∏è CRITICAL: ‡∏ñ‡πâ‡∏≤‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô 500k ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (rmf ‚Üí pvd ‚Üí pension)
        if (totalRetirement > 500000) {
            const excess = totalRetirement - 500000;
            let adjusted = false;

            // ‡∏•‡∏î RMF ‡∏Å‡πà‡∏≠‡∏ô
            if (rmfValue > 0) {
                const rmfReduction = Math.min(rmfValue, excess);
                rmfValue -= rmfReduction;
                rmfSlider.value = rmfValue;
                document.getElementById(`${plan}_rmf_display`).textContent = formatNumber(rmfValue);
                totalRetirement -= rmfReduction;
                adjusted = true;
            }

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏•‡∏î PVD
            if (totalRetirement > 500000 && pvdValue > 0) {
                const excess2 = totalRetirement - 500000;
                const pvdReduction = Math.min(pvdValue, excess2);
                pvdValue -= pvdReduction;
                pvdSlider.value = pvdValue;
                document.getElementById(`${plan}_pvd_display`).textContent = formatNumber(pvdValue);
                totalRetirement -= pvdReduction;
                adjusted = true;
            }

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏•‡∏î ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç
            if (totalRetirement > 500000 && pensionValue > 0) {
                const excess3 = totalRetirement - 500000;
                const pensionReduction = Math.min(pensionValue, excess3);
                pensionValue -= pensionReduction;
                pensionSlider.value = pensionValue;
                document.getElementById(`${plan}_pensionInsurance_display`).textContent = formatNumber(pensionValue);
                totalRetirement -= pensionReduction;
                adjusted = true;
            }

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ localStorage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤
            if (adjusted) {
                savePlanData();
            }
        }

        // Max ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á = min(‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß, ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° 500K)
        const pensionMax = Math.min(pensionIndividualMax, pensionValue + Math.max(0, 500000 - totalRetirement));
        const pvdMax = Math.min(pvdIndividualMax, pvdValue + Math.max(0, 500000 - totalRetirement));
        const rmfMax = Math.min(rmfIndividualMax, rmfValue + Math.max(0, 500000 - totalRetirement));

        pensionSlider.max = pensionMax;
        pvdSlider.max = pvdMax;
        rmfSlider.max = rmfMax;

        console.log(`${plan} ‡∏Å‡∏•‡∏∏‡πà‡∏°500K: pension=${pensionValue}/${pensionMax}, pvd=${pvdValue}/${pvdMax}, rmf=${rmfValue}/${rmfMax}, total=${totalRetirement}/500000`);

        // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô max ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏•‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
        if (pensionValue > pensionMax) {
            pensionSlider.value = pensionMax;
            document.getElementById(`${plan}_pensionInsurance_display`).textContent = formatNumber(pensionMax);
        }
        if (pvdValue > pvdMax) {
            pvdSlider.value = pvdMax;
            document.getElementById(`${plan}_pvd_display`).textContent = formatNumber(pvdMax);
        }
        if (rmfValue > rmfMax) {
            rmfSlider.value = rmfMax;
            document.getElementById(`${plan}_rmf_display`).textContent = formatNumber(rmfMax);
        }
    }

    // === ‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß) ===
    const thaiEsgSlider = document.getElementById(`${plan}_thaiEsg`);
    const thaiEsgxSlider = document.getElementById(`${plan}_thaiEsgx`);

    if (thaiEsgSlider) {
        thaiEsgSlider.max = Math.min(netIncome * 0.30, 300000);
    }
    if (thaiEsgxSlider) {
        thaiEsgxSlider.max = Math.min(netIncome * 0.30, 300000);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏£‡∏ß‡∏°
function updateLimitDisplay(plan) {
    const netIncome = incomeData.netIncome || 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û)
    let insuranceTotal = 0;
    const lifeIns = document.getElementById(`${plan}_lifeInsurance_check`)?.checked ?
        (parseFloat(document.getElementById(`${plan}_lifeInsurance`)?.value) || 0) : 0;
    const healthIns = document.getElementById(`${plan}_healthInsurance_check`)?.checked ?
        (parseFloat(document.getElementById(`${plan}_healthInsurance`)?.value) || 0) : 0;
    insuranceTotal = lifeIns + healthIns;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏Å‡∏•‡∏∏‡πà‡∏° 500K (PVD + RMF + ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç)
    let retirementTotal = 0;
    const pension = document.getElementById(`${plan}_pensionInsurance_check`)?.checked ?
        (parseFloat(document.getElementById(`${plan}_pensionInsurance`)?.value) || 0) : 0;
    const pvd = document.getElementById(`${plan}_pvd_check`)?.checked ?
        (parseFloat(document.getElementById(`${plan}_pvd`)?.value) || 0) : 0;
    const rmf = document.getElementById(`${plan}_rmf_check`)?.checked ?
        (parseFloat(document.getElementById(`${plan}_rmf`)?.value) || 0) : 0;
    retirementTotal = pension + pvd + rmf;

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô
    const insuranceTotalEl = document.getElementById(`${plan}_insurance_total`);
    const insuranceBarEl = document.getElementById(`${plan}_insurance_bar`);
    const insuranceWarningEl = document.getElementById(`${plan}_insurance_warning`);

    if (insuranceTotalEl && insuranceBarEl && insuranceWarningEl) {
        const insurancePercent = Math.min((insuranceTotal / 100000) * 100, 100);
        insuranceTotalEl.textContent = `${formatNumber(insuranceTotal)} / 100,000`;
        insuranceBarEl.style.width = `${insurancePercent}%`;

        if (insuranceTotal > 100000) {
            insuranceBarEl.style.background = 'linear-gradient(90deg, #dc3545, #ff6b6b)';
            insuranceWarningEl.textContent = `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï! ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 100,000 ‡∏ö‡∏≤‡∏ó`;
            insuranceWarningEl.style.color = '#dc3545';
            insuranceWarningEl.style.fontWeight = '600';
        } else if (insuranceTotal > 90000) {
            insuranceBarEl.style.background = 'linear-gradient(90deg, #ffc107, #ffd54f)';
            insuranceWarningEl.textContent = `‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(100000 - insuranceTotal)} ‡∏ö‡∏≤‡∏ó)`;
            insuranceWarningEl.style.color = '#f57c00';
            insuranceWarningEl.style.fontWeight = '500';
        } else {
            insuranceBarEl.style.background = plan === 'plan1' ?
                'linear-gradient(90deg, #4CAF50, #81C784)' :
                'linear-gradient(90deg, #F57C00, #FFB74D)';
            insuranceWarningEl.textContent = insuranceTotal > 0 ?
                `‚úì ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(100000 - insuranceTotal)} ‡∏ö‡∏≤‡∏ó)` : '';
            insuranceWarningEl.style.color = '#666';
            insuranceWarningEl.style.fontWeight = 'normal';
        }
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏Å‡∏•‡∏∏‡πà‡∏° 500K
    const retirementTotalEl = document.getElementById(`${plan}_retirement_total`);
    const retirementBarEl = document.getElementById(`${plan}_retirement_bar`);
    const retirementWarningEl = document.getElementById(`${plan}_retirement_warning`);

    if (retirementTotalEl && retirementBarEl && retirementWarningEl) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡πÅ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        const pensionLimit = Math.min(netIncome * 0.15, 200000);
        const rmfLimit = Math.min(netIncome * 0.30, 500000);

        const retirementPercent = Math.min((retirementTotal / 500000) * 100, 100);
        retirementTotalEl.textContent = `${formatNumber(retirementTotal)} / 500,000`;
        retirementBarEl.style.width = `${retirementPercent}%`;

        let warnings = [];
        if (pension > pensionLimit) {
            warnings.push(`‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${formatNumber(pensionLimit)} ‡∏ö‡∏≤‡∏ó (15% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)`);
        }
        if (rmf > rmfLimit) {
            warnings.push(`RMF ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${formatNumber(rmfLimit)} ‡∏ö‡∏≤‡∏ó (30% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)`);
        }

        if (retirementTotal > 500000) {
            retirementBarEl.style.background = 'linear-gradient(90deg, #dc3545, #ff6b6b)';
            retirementWarningEl.textContent = `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï! ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 500,000 ‡∏ö‡∏≤‡∏ó`;
            retirementWarningEl.style.color = '#dc3545';
            retirementWarningEl.style.fontWeight = '600';
        } else if (warnings.length > 0) {
            retirementBarEl.style.background = 'linear-gradient(90deg, #ffc107, #ffd54f)';
            retirementWarningEl.textContent = `‚ö†Ô∏è ${warnings[0]}`;
            retirementWarningEl.style.color = '#f57c00';
            retirementWarningEl.style.fontWeight = '500';
        } else if (retirementTotal > 450000) {
            retirementBarEl.style.background = 'linear-gradient(90deg, #ffc107, #ffd54f)';
            retirementWarningEl.textContent = `‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(500000 - retirementTotal)} ‡∏ö‡∏≤‡∏ó)`;
            retirementWarningEl.style.color = '#f57c00';
            retirementWarningEl.style.fontWeight = '500';
        } else {
            retirementBarEl.style.background = plan === 'plan1' ?
                'linear-gradient(90deg, #4CAF50, #81C784)' :
                'linear-gradient(90deg, #F57C00, #FFB74D)';
            retirementWarningEl.textContent = retirementTotal > 0 ?
                `‚úì ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${formatNumber(500000 - retirementTotal)} ‡∏ö‡∏≤‡∏ó)` : '';
            retirementWarningEl.style.color = '#666';
            retirementWarningEl.style.fontWeight = 'normal';
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Max
function setMaxValue(plan, item) {
    const slider = document.getElementById(`${plan}_${item}`);
    const displaySpan = document.getElementById(`${plan}_${item}_display`);

    if (!slider || !displaySpan) {
        console.warn(`‚ö†Ô∏è Missing elements for ${plan}_${item}`);
        return;
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï slider limits ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ max ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    updateSliderLimits(plan);

    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ max ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å updateSliderLimits()
    const maxValue = parseInt(slider.max) || 0;

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ slider ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï display
    slider.value = maxValue;
    displaySpan.textContent = formatNumber(maxValue);

    console.log(`üéØ Set ${plan}_${item} to MAX:`, maxValue, `(slider.max=${slider.max})`);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏£‡∏ß‡∏°
    updateLimitDisplay(plan);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    updateAllScenarios();
}

function loadSavedData() {
    // Load income data
    const savedIncome = localStorage.getItem('taxCalc_incomeData');
    if (savedIncome) {
        const data = JSON.parse(savedIncome);
        if (data.salary) {
            document.getElementById('salary').value = formatNumber(data.salary);
            document.getElementById('salarySlider').value = data.salary;
            document.getElementById('salaryDisplay').textContent = formatNumber(data.salary);
        }
        if (data.bonus) {
            document.getElementById('bonus').value = formatNumber(data.bonus);
            document.getElementById('bonusSlider').value = data.bonus;
            document.getElementById('bonusDisplay').textContent = formatNumber(data.bonus);
        }
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ global variable
        incomeData = {
            salary: data.salary || 0,
            bonus: data.bonus || 0,
            totalIncome: data.totalIncome || 0,
            expenses: data.expenses || 0,
            netIncome: data.netIncome || 0
        };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö UI
        saveIncomeData();
    }

    // Load basic deductions
    const savedBasic = localStorage.getItem('taxCalc_basicDeductions');
    if (savedBasic) {
        const data = JSON.parse(savedBasic);
        if (data.spouseDeduction) document.getElementById('spouseDeduction').checked = data.spouseDeduction;
        if (data.childCount) {
            document.getElementById('childSlider').value = data.childCount;
            document.getElementById('childCount').value = data.childCount;
            document.getElementById('childDisplay').textContent = data.childCount;
            document.getElementById('childDeductionDisplay').textContent = formatNumber(data.childCount * 30000);
        }
        if (data.parentDeduction) {
            document.getElementById('parentDeduction').checked = data.parentDeduction;
            document.getElementById('parentOptions').style.display = 'block';
            document.getElementById('parentCount').value = data.parentCount;
        }
        if (data.parentSpouseDeduction) {
            document.getElementById('parentSpouseDeduction').checked = data.parentSpouseDeduction;
            document.getElementById('parentSpouseOptions').style.display = 'block';
            document.getElementById('parentSpouseCount').value = data.parentSpouseCount;
        }
        if (data.socialSecurity) {
            const value = parseNumberWithComma(data.socialSecurity);
            document.getElementById('socialSecuritySlider').value = value;
            document.getElementById('socialSecurity').value = formatNumber(value);
            document.getElementById('socialSecurityDisplay').textContent = formatNumber(value);
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ global variable
        let total = 60000; // ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
        if (data.spouseDeduction) total += 60000;
        total += (data.childCount || 0) * 30000;
        if (data.parentDeduction) total += parseInt(data.parentCount || 1) * 30000;
        if (data.parentSpouseDeduction) total += parseInt(data.parentSpouseCount || 1) * 30000;
        if (data.socialSecurity) {
            const socialSecurity = Math.min(parseNumberWithComma(data.socialSecurity) * 12, 10000);
            total += socialSecurity;
        }
        basicDeductions = { total };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö UI
        // (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ checkbox.checked ‡πÅ‡∏•‡∏∞ slider.value ‡πÑ‡∏°‡πà trigger event listeners)
        saveBasicDeductions();
    }

    updateIncomePreview();
    updateBasicDeductionPreview();
}
